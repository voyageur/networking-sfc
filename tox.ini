[tox]
envlist = py35,py27,pep8
minversion = 1.6
skipsdist = True

[testenv]
setenv = VIRTUAL_ENV={envdir}
         PYTHONWARNINGS=default::DeprecationWarning
passenv = TRACE_FAILONLY
usedevelop = True
install_command = {toxinidir}/tools/tox_install.sh {env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt} {opts} {packages}
deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
whitelist_externals =
    sh
    find
commands =
  find . -type f -name "*.py[c|o]" -delete
  find . -type d -name "__pycache__" -delete
  {toxinidir}/tools/ostestr_compat_shim.sh '{posargs}'
# there is also secret magic in ostestr which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.

[testenv:functional]
setenv =
  {[testenv]setenv}
  OS_TEST_PATH=./networking_sfc/tests/functional

[testenv:functional-py35]
basepython = python3.5
setenv = {[testenv:functional]setenv}

[testenv:dsvm-functional]
setenv =
    {[testenv]setenv}
    OS_TEST_PATH=./networking_sfc/tests/functional
    OS_SUDO_TESTING=1
    OS_FAIL_ON_MISSING_DEPS=1
    OS_TEST_TIMEOUT=180
    OS_TESTR_CONCURRENCY=1
    OS_LOG_PATH={env:OS_LOG_PATH:/opt/stack/logs}
whitelist_externals =
  sh
  cp
  sudo
sitepackages=True
commands =
  {toxinidir}/tools/ostestr_compat_shim.sh '{posargs}'

[testenv:dsvm-functional-py35]
basepython = python3.5
setenv = {[testenv:dsvm-functional]setenv}
sitepackages={[testenv:dsvm-functional]sitepackages}
commands =
  {toxinidir}/tools/ostestr_compat_shim.sh '{posargs}'

[testenv:api]
sitepackages=True
setenv =
  {[testenv]setenv}
  OS_TEST_PATH=./networking_sfc/tests/tempest_plugin/tests/api/
  OS_TESTR_CONCURRENCY=1
  TEMPEST_CONFIG_DIR={env:TEMPEST_CONFIG_DIR:/opt/stack/tempest/etc}
commands =
  python setup.py testr --slowest --testr-args='{posargs}'

[testenv:scenario]
sitepackages=True
setenv =
  {[testenv]setenv}
  OS_TEST_PATH=./networking_sfc/tests/tempest_plugin/tests/scenario/
  OS_TESTR_CONCURRENCY=1
  TEMPEST_CONFIG_DIR={env:TEMPEST_CONFIG_DIR:/opt/stack/tempest/etc}
commands =
  python setup.py testr --slowest --testr-args='{posargs}'

[testenv:pep8]
commands =
  flake8
  pylint --rcfile=.pylintrc --output-format=colorized {posargs:networking_sfc}
  {toxinidir}/tools/check_unit_test_structure.sh
  neutron-db-manage --subproject networking-sfc --database-connection sqlite:// check_migration
whitelist_externals = sh

[testenv:cover]
commands =
  python setup.py test --coverage --coverage-package-name=networking_sfc --testr-args='{posargs}'

[testenv:venv]
commands = {posargs}

[testenv:docs]
commands = python setup.py build_sphinx

[flake8]
# TODO(dougwig) -- uncomment this to test for remaining linkages
# N530 direct neutron imports not allowed
ignore = N530
# From neutron-lib flake8
# H904: Delay string interpolations at logging calls
enable-extensions=H904
show-source = true
builtins = _
exclude = ./.*,build,dist

[hacking]
import_exceptions = networking_sfc._i18n
local-check-factory = neutron_lib.hacking.checks.factory

[testenv:api-ref]
whitelist_externals = rm
commands =
  rm -rf api-ref/build
  sphinx-build -W -b html -d api-ref/build/doctrees api-ref/source api-ref/build/html

[testenv:debug]
commands = oslo_debug_helper -t networking_sfc/tests {posargs}

[testenv:releasenotes]
commands = sphinx-build -a -E -W -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html
